<?php
// $Id$

/*
 * hooks
 */
function uc_buyingclub_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#uc_buyingclub":
      $output = '<p>'. t("Views and forms for running a buying club with Ubercart"). '</p>';
      break;
  }
  return $output;
}

function uc_buyingclub_perm() {
  return array('access uc_buyingclub', 'create uc_buyingclub', 'administer uc_buyingclub');
}

function uc_buyingclub_menu() {
  $items = array();

  $items['buyingclub/finalize'] = array(
    'title' => "Buying Club: Reconcile orders",
    'access arguments' => array('administer uc_buyingclub'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_buyingclub_finalization_form'),
  );

  return $items;
}

function uc_buyingclub_block($op='list', $delta=0) {
  $block = array();

  if ($op == 'list') {
    $block[0]["info"] = t('Buying Club');
  }
  else if ($op == 'view') {
    $query = "SELECT nid, title FROM {node}";
    $query_result = db_query($query);
    $block_content = '';

    while ($links = db_fetch_object($query_result)) {
      $block_content .= l($links->title, 'node/'. $links->nid) .'</br>';
    }

    if ($block_content == '') {
      $block['subject'] = 'Buying Club';
      $block['content'] = 'No content';
    }
    else {
      $block['subject'] = 'Buying Club';
      $block['content'] = $block_content;
    }
  }
  return $block;
}

function uc_buyingclub_theme() {
  return array(
    'uc_buyingclub_finalization_form' => array(
      'arguments' => array('form', NULL)
    )
  );
}

function uc_buyingclub_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = user_mail_tokens($params['account'], $language);

  switch ($key) {
    case 'final_order':
      $message['subject'] = t('Finalized Greene Hill Food Coop Buying Club order', $variables, $language->language);
      $message['body'] = t('Hi !name,\n\nYour Greene Hill Food Coop Buying Club order has been finalized:\n\n', $variables, $language->language);
      foreach ($params['products_given'] as $product => $given) {
        $message['body'] .= $product . ": wanted " . $params['products_desired'][$product] . ", received " . $params['products_given'][$product] . "---";
      }
      $message['body'] .= ".\n\nYour total cost will be $" . $params['total_cost'];
      break;
  }
}


/*
 * order finalization
 */

/*
 * Create the finalization table and form.
 */
function uc_buyingclub_finalization_form($rows) {
  $distributor_db_info = content_database_info(content_fields('field_distributor')); 
  $distributor_table = $distributor_db_info['table'];
  $distributor_column = $distributor_db_info['columns']['nid']['column'];

  $minimum_order_db_info = content_database_info(content_fields('field_minimum_order')); 
  $minimum_order_table = $minimum_order_db_info['table'];
  $minimum_order_column = $minimum_order_db_info['columns']['value']['column'];

  $query = "SELECT p.title AS product_name, p.nid AS product_id, SUM(op.qty) AS order_product_qty, d.title AS distributor_name, ctd2.". $minimum_order_column ." AS minimum_order ".
    "FROM {uc_orders} o, {uc_order_products} op, {node} p, {node} d, {". $distributor_table ."} ctd, {". $minimum_order_table ."} ctd2 ".
    "WHERE p.type='product' AND d.type='distributor' AND op.order_id=o.order_id AND p.nid=op.nid ".
      "AND ctd.vid=p.vid AND ctd.". $distributor_column ."=d.nid ".
      "AND ctd2.vid=p.vid ".
    "GROUP BY p.nid ".
    "ORDER BY d.title, p.title ";

  $query_result = db_query($query);

  $form = array();

  if ($query_result) {
    while ($row = db_fetch_object($query_result)) {
      $form[$row->product_id]['product_id'] = array('#value' => stripslashes($row->product_id));
      $form[$row->product_id]['product_name'] = array('#value' => stripslashes($row->product_name));
      $form[$row->product_id]['order_product_qty'] = array('#value' => stripslashes($row->order_product_qty));
      $form[$row->product_id]['distributor_name'] = array('#value' => stripslashes($row->distributor_name));
      $form[$row->product_id]['minimum_order'] = array('#value' => stripslashes($row->minimum_order));
      $form[$row->product_id]['ordered_'. $row->product_id] = array(
        '#type' => 'textfield',
        '#default_value' => '0',
        '#maxlength' => 3,
        '#size' => 3,
        '#required' => FALSE,
      );
    }
  }

  $form['#attributes'] = array();

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['cancel'] = array(
    '#type' => 'markup',
    '#value' => l(t('Cancel'), 'dashboard'),
  );

  return $form;
}

/*
 * Theme finalization form as a table
 */
function theme_uc_buyingclub_finalization_form($form) {
  $rows = array();

  foreach (element_children($form) as $key) {
    if (isset($form[$key]['product_id'])) {
      $product_id = $form[$key]['product_id'];
      $row = array();
      $row[] = array('data' => drupal_render($form[$key]['product_name']));
      $row[] = array('data' => drupal_render($form[$key]['distributor_name']));
      $row[] = array('data' => drupal_render($form[$key]['order_product_qty']));
      $row[] = array('data' => drupal_render($form[$key]['minimum_order']));
      $row[] = array('data' => drupal_render($form[$key]['ordered_' . $key]), 'class' => 'textfield');
      $rows[] = $row;
      $form[$key]['#printed'] = TRUE;
      $form[$key]['product_id']['#printed'] = TRUE; // avoid re-rendering these
    }
  }

  $header = array();
  $header[] = t('Product');
  $header[] = t('Distributor');
  $header[] = t('Ordered by Members');
  $header[] = t('Minimum Order');
  $header[] = array('data' => t('Qty to Order'));

  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);
  return $output;
}

/*
 * validate finalization form
 */
function uc_buyingclub_finalization_form_validate($form, &$form_state) {
  foreach ($form_state['values'] as $key => $value) {
    if (stripos($key, 'ordered_') === 0) {
      if ($value < 0) {
        form_set_error('', t('Negative orders are not allowed'));
      }
      if (!is_numeric($value)) {
        form_set_error('', t('Orders must be numbers'));
      }
    }
  }
}

/*
 * submit finalization form
 */
function uc_buyingclub_finalization_form_submit($form_id, $form) {
  $form_values = $form['values'];
  $prefix = 'ordered_';
  $start = '2010-01-01 00:00:00';
  $end = '2012-01-01 00:00:00';

  // finalize each product submitted with the quantity ordered as indicated
  foreach ($form_values as $key => $value) {
    if (stripos($key, $prefix) === 0) {
      $product_id = substr($key, strlen($prefix));
      $qty_ordered = $value;

      uc_buyingclub_finalize_product_order($product_id, $qty_ordered, $start, $end);
    }
  }

  // finalize each the total order for each user who ordered in this period
  uc_buyingclub_finalize_users($start, $end);

  drupal_set_message(t('Ordered the given amounts for each product and notified purchasers'));
}

/*
 * Finalize all orders for a given product.
 *
 * @param $product_id
 *    The nid of the product node
 * @param $qty_ordered
 *    The quantity ordered through the finalization form
 * @param $start
 *    The string representing the start of the ordering period
 * @param $end
 *    The string representing the end of the ordering period
 */
function uc_buyingclub_finalize_product_order($product_id, $qty_ordered, $start, $end) {
  $query = "SELECT op.order_product_id AS id, op.qty AS qty_desired ".
    "FROM {uc_order_products} op, {uc_orders} o ".
    "WHERE op.order_id = o.order_id AND op.nid = %d ".
    "AND o.created > UNIX_TIMESTAMP('%s') AND o.created < UNIX_TIMESTAMP('%s') ".
    "ORDER BY o.created";

  $query_result = db_query($query, $product_id, $start, $end);

  $qty_available = $qty_ordered;
  if ($query_result) {
    while ($row = db_fetch_object($query_result)) {
      // determine how much of this order for this product will be fulfilled
      $qty_desired = $row->qty_desired;
      $qty_given = 0;

      if ($qty_available > 0) {
        if ($qty_desired <= $qty_available) {
          $qty_given = $qty_desired;
        }
        else { // give as much as we can
          $qty_given = $qty_available;
        }
      }

      // save
      $to_write = array(
        'order_product_id' => $row->id,
        'qty' => $qty_given,
        'finalized' => time(),
      );
      drupal_write_record('uc_buyingclub_order_products', $to_write);
      
      $qty_available -= $qty_given;
    }
  }
}

/*
 * Finalize orders for all users in the given ordering period.
 *
 * @param $start
 *    The string representing the start of the ordering period
 * @param $end
 *    The string representing the end of the ordering period
 */
function uc_buyingclub_finalize_users($start, $end) {
  $query = "SELECT DISTINCT o.uid AS user_id ".
    "FROM {uc_orders} o ".
    "WHERE o.created > UNIX_TIMESTAMP('%s') AND o.created < UNIX_TIMESTAMP('%s')";

  $query_result = db_query($query, $start, $end);

  if ($query_result) {
    while ($row = db_fetch_object($query_result)) {
      uc_buyingclub_finalize_user($row->user_id, $start, $end);
    }
  }
}

/*
 * Finalize orders for a given user in the given ordering period.
 *
 * @param $user_id
 *    The id of the user
 * @param $start
 *    The string representing the start of the ordering period
 * @param $end
 *    The string representing the end of the ordering period
 */
function uc_buyingclub_finalize_user($user_id, $start, $end) {
  $query = "SELECT op.title AS title, op.qty AS qty_desired, bop.qty AS qty_given, op.price AS price ".
    "FROM {uc_orders} o, {uc_order_products} op, {uc_buyingclub_order_products} bop ".
    "WHERE o.uid=%d AND o.created > UNIX_TIMESTAMP('%s') AND o.created < UNIX_TIMESTAMP('%s') ".
      "AND op.order_id = o.order_id AND bop.order_product_id = op.order_product_id";

  $query_result = db_query($query, $user_id, $start, $end);

  $total_cost = 0;
  $products_given = array();
  $products_desired = array();

  if ($query_result) {
    while ($row = db_fetch_object($query_result)) {
      // assemble summary, new price
      $price = (float)$row->price;
      $qty_given = (int)$row->qty_given;
      $qty_desired = (int)$row->qty_desired;

      $total_cost += ($price * $qty_given);

      if (!$products_given[$row->title]) $products_given[$row->title] = 0;
      $products_given[$row->title] += $qty_given;

      if (!$products_desired[$row->title]) $products_desired[$row->title] = 0;
      $products_desired[$row->title] += $qty_desired;
    }

    $account = user_load($user_id);
    $params = array(
      'name' => $account->name,
      'total_cost' => $total_cost,
      'products_given' => $products_given,
      'products_desired' => $products_desired,
    );
    drupal_mail('uc_buyingclub', 'final_order', $account->mail, user_preferred_language($account), $params);
  }
}
