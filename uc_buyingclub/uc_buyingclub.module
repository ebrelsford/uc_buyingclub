<?php
// $Id$

/*
 * The label of the "Would buy more" attribute.
 */
define('UC_BUYINGCLUB_WOULD_BUY_MORE_LABEL', 'Would you buy an extra unit of this item if we needed more to meet our minimum?');

/*
 * hooks
 */
function uc_buyingclub_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#uc_buyingclub":
      $output = '<p>'. t("Views and forms for running a buying club with Ubercart"). '</p>';
      break;
  }
  return $output;
}

function uc_buyingclub_perm() {
  return array('access uc_buyingclub', 'create uc_buyingclub', 'administer uc_buyingclub');
}

function uc_buyingclub_menu() {
  $items = array();

  $items['buyingclub/finalize'] = array(
    'title' => "Buying Club: Finalize orders",
    'access arguments' => array('administer uc_buyingclub'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_buyingclub_finalization_form'),
  );

  $items['buyingclub/view/finalized'] = array(
    'title' => "Buying Club: View finalized orders",
    'access arguments' => array('administer uc_buyingclub'),
    'type' => MENU_CALLBACK,
    'page callback' => 'uc_buyingclub_view_finalized_orders',
  );

  $items['buyingclub/view/finalized/by_user'] = array(
    'title' => "Buying Club: View finalized orders by user",
    'access arguments' => array('administer uc_buyingclub'),
    'type' => MENU_CALLBACK,
    'page callback' => 'uc_buyingclub_view_finalized_orders_by_user',
  );

  $items['buyingclub/view/finalized/by_distributor'] = array(
    'title' => "Buying Club: View finalized orders by distributor",
    'access arguments' => array('administer uc_buyingclub'),
    'type' => MENU_CALLBACK,
    'page callback' => 'uc_buyingclub_view_finalized_orders_by_distributor',
  );

  $items['buyingclub/view/finalized/by_distributor/csv'] = array(
    'title' => "Buying Club: View finalized orders by distributor",
    'access arguments' => array('administer uc_buyingclub'),
    //'page arguments' => array(3, 2),
    'type' => MENU_CALLBACK,
    'page callback' => 'uc_buyingclub_download_finalized',
  );

  $items['buyingclub/view/periods'] = array(
    'title' => "Buying Club: View ordering periods",
    'access arguments' => array('administer uc_buyingclub'),
    'type' => MENU_CALLBACK,
    'page callback' => 'uc_buyingclub_view_ordering_periods',
  );

  return $items;
}

function uc_buyingclub_block($op='list', $delta=0) {
  $block = array();

  if ($op == 'list') {
    $block[0]["info"] = t('Buying Club');
  }
  else if ($op == 'view') {
    $query = "SELECT nid, title FROM {node}";
    $query_result = db_query($query);
    $block_content = '';

    while ($links = db_fetch_object($query_result)) {
      $block_content .= l($links->title, 'node/'. $links->nid) .'</br>';
    }

    if ($block_content == '') {
      $block['subject'] = 'Buying Club';
      $block['content'] = 'No content';
    }
    else {
      $block['subject'] = 'Buying Club';
      $block['content'] = $block_content;
    }
  }
  return $block;
}

function uc_buyingclub_token_values($type, $object = NULL, $options = array()) {
  if ($type == 'global') {
    $period = _uc_buyingclub_get_most_recent_ordering_period();
    $date_format = 'l\, M jS';
    $tokens['pickup-date'] = '6pm - 9pm on '. format_date($period->pickup, $type='custom', $format=$date_format);
    return $tokens;
  }
}
function uc_buyingclub_token_list($type = 'all') {
  if ($type == 'global' || $type == 'all') {
    $tokens['global']['pickup-date'] = t('The next pickup date');
    return $tokens;
  }
}

function uc_buyingclub_theme() {
  return array(
    'uc_buyingclub_finalization_form' => array(
      'arguments' => array('form', NULL)
    )
  );
}

function uc_buyingclub_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = user_mail_tokens($params['account'], $language);
  
  $store_values = uc_store_token_values('global');
  $buying_club_name = $store_values['store-name'];

  switch ($key) {
    case 'final_order':
      $message['headers'] = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html',
        'From' => 'Greene Hill Food Co-op Merchandising Committee <merchandising@greenehillfoodcoop.com>', # TODO make configurable
      );
      $message['subject'] = t('Finalized '. $buying_club_name .' order', $variables, $language->language);

      $first_name = $params['first_name'];

      $body = <<<EOT
<html>
    <body>
        <table align="center" cellpadding="0" cellspacing="0" style="font-family: Helvetica,Arial,sans-serif; font-size: 1em; color: rgb(25, 25, 25);" width="700">
            <tbody>
                <tr>
                    <td><img alt="Greene Hill Food Co-op" height="282" src="http://members.greenehillfoodcoop.com/images/newsletter_header_5.jpg" width="700" /></td>
                </tr>
            </tbody>
        </table>
        <table align="center" cellpadding="10px" cellspacing="0" style="font-family: Helvetica,Arial,sans-serif; font-size: 1em; color: rgb(25, 25, 25);" width="628px">
            <tbody>
                 <tr align="center" border="0" cellpadding="0" cellspacing="0" style="background: none repeat scroll 0% 0% rgb(255, 255, 255); font-family: Helvetica,Arial,sans-serif; font-size: 1em;" width="628">
                     <td style="text-align: left;">
                         <div style="display: inline; font-family: Impact,Arial Black,sans-serif; font-size: 1.6em; letter-spacing: 0.05em; word-spacing: 0.05em; text-transform: uppercase; color: rgb(102, 0, 0);">Buying Club Invoice</div>
                            <p>Hello $first_name,</p>
                            <p>This is your invoice for your most recent order.</p>
                            <table cellpadding="3">
                                <tr>
                                    <th>Product</th>
                                    <th>Quanity Desired</th>
                                    <th>Quantity You Will Receive</th>
                                    <th>Cost</th>
                                </tr>
                                <tbody>
EOT;

      foreach ($params['products_given'] as $product => $given) {
        $body .= '<tr>';
        $body .= '<td>'. $product .'</td>';
        $body .= '<td>'. $params['products_desired'][$product] .'</td>';
        $body .= '<td>'. $params['products_given'][$product] .'</td>';
        $body .= '<td>'. uc_currency_format($params['products_cost'][$product]) .'</td>';
        $body .= '</tr>';
      }

      $formatted_total = uc_currency_format($params['total_cost']);

      # TODO make configurable
      $body .= <<<EOT
                                </tbody>
                            </table>
                            <p>Your estimated, preliminary subtotal is <b>$formatted_total</b></p>
                            <p>Please remember that this total will likely be slightly different on pickup day. The weights of some items, such as meat, will vary, and there is always the chance that some items will not be delivered. So, please, bring a blank check when you pick up your food.</p>
                            <p>See you at 18 Putnam Avenue on pickup day: Wednesday, February 16th, from 6pm-9pm.</p>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </body>
</html>
EOT;

      $message['body'] = $body;
      break;
  }
}


/*
 * order finalization
 */

/*
 * was the ordering period with the given $start and $end already finalized?
 */
function _uc_buyingclub_already_finalized($start, $end) {
  $query = "SELECT count(op.order_product_id) AS num ".
    "FROM {uc_orders} o, {uc_order_products} op, {uc_buyingclub_order_products} bop ".
    "WHERE op.order_id=o.order_id AND bop.order_product_id = op.order_product_id ".
      "AND o.created > %d AND o.created < %d ";
  $result = db_query($query, $start, $end);
  return $result && db_fetch_object($result)->num > 0;
}

function _uc_buyingclub_get_orders_to_finalize($start, $end) {
  $distributor_db_info = content_database_info(content_fields('field_distributor')); 
  $distributor_table = $distributor_db_info['table'];
  $distributor_column = $distributor_db_info['columns']['nid']['column'];

  $minimum_order_db_info = content_database_info(content_fields('field_minimum_order')); 
  $minimum_order_table = $minimum_order_db_info['table'];
  $minimum_order_column = $minimum_order_db_info['columns']['value']['column'];

  $query = "SELECT p.title AS product_name, p.nid AS product_id, SUM(op.qty) AS order_product_qty, d.title AS distributor_name, ctd2.". $minimum_order_column ." AS minimum_order ".
    "FROM {uc_orders} o, {uc_order_products} op, {node} p, {node} d, {". $distributor_table ."} ctd, {". $minimum_order_table ."} ctd2 ".
    "WHERE op.order_id=o.order_id AND p.nid=op.nid ".
      "AND o.created > %d AND o.created < %d ".
      "AND ctd.vid=p.vid AND ctd.". $distributor_column ."=d.nid ".
      "AND ctd2.vid=p.vid ".
    "GROUP BY p.nid ".
    "ORDER BY d.title, p.title ";

  return db_query($query, $start, $end);
}

/*
 * get an array of product ids to the number of members who said they'd buy an extra of it to meet minimums
 */
function _uc_buyingclub_get_would_buy_more_qty($start, $end) {
  $query = "SELECT p.nid AS product_id, COUNT(*) AS would_buy_more_qty ".
    "FROM {uc_orders} o, {uc_order_products} op, {node} p ".
    "WHERE op.order_id=o.order_id AND p.nid=op.nid ".
      "AND o.created > %d AND o.created < %d ".
      "AND op.data LIKE '%%%s%%' ".
    "GROUP BY p.nid ";

  $arr = array();

  $query_result = db_query($query, $start, $end, UC_BUYINGCLUB_WOULD_BUY_MORE_LABEL);
  if ($query_result) {
    while ($row = db_fetch_object($query_result)) {
      $arr[$row->product_id] = (int)$row->would_buy_more_qty;
    }
  }

  return $arr;
}

/*
 * Create the finalization table and form.
 */
function uc_buyingclub_finalization_form($rows) {
  $ordering_period = _uc_buyingclub_get_most_recent_ordering_period();
  $start = $ordering_period->start;
  $end = $ordering_period->end;

  // warn user if this ordering period has already been (perhaps partially) finalized or should not yet be finalized
  if (_uc_buyingclub_already_finalized($start, $end)) {
    drupal_set_message('Someone has already finalized this ordering period. Please contact an admin if changes need to be made.', $type='error', $repeat=FALSE);
  }
  if (time() < $end) {
    $date_format = "ga \o\\n l\, M jS Y";
    drupal_set_message('This ordering period is not over yet. Please wait until '. format_date($end, $type='custom', $format=$date_format) .' to finalize it!', $type='error', $repeat=FALSE);
  }

  // make queries
  $query_result = _uc_buyingclub_get_orders_to_finalize($start, $end);
  $would_buy_more = _uc_buyingclub_get_would_buy_more_qty($start, $end);

  // build table/form
  $form = array();

  if ($query_result) {
    while ($row = db_fetch_object($query_result)) {
      $would_buy_more_qty = $would_buy_more[$row->product_id];
      if ($would_buy_more_qty == NULL) $would_buy_more_qty = 0;

      $form[$row->product_id]['product_id'] = array('#value' => stripslashes($row->product_id));
      $form[$row->product_id]['product_name'] = array('#value' => stripslashes($row->product_name));
      $form[$row->product_id]['order_product_qty'] = array('#value' => stripslashes($row->order_product_qty));
      $form[$row->product_id]['would_buy_more'] = array('#value' => $would_buy_more_qty);
      $form[$row->product_id]['distributor_name'] = array('#value' => stripslashes($row->distributor_name));
      $form[$row->product_id]['minimum_order'] = array('#value' => stripslashes($row->minimum_order));
      $form[$row->product_id]['ordered_'. $row->product_id] = array(
        '#type' => 'textfield',
        '#default_value' => '0',
        '#maxlength' => 3,
        '#size' => 3,
        '#required' => FALSE,
      );
    }
  }

  $form['start'] = array(
    '#type' => 'hidden',
    '#value' => $start,
  );
  $form['end'] = array(
    '#type' => 'hidden',
    '#value' => $end,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form['cancel'] = array(
    '#type' => 'markup',
    '#value' => l(t('Cancel'), 'dashboard'),
  );

  drupal_add_js(drupal_get_path('module', 'uc_buyingclub') .'/uc_buyingclub.js');
  return $form;
}

/*
 * Theme finalization form as a table
 */
function theme_uc_buyingclub_finalization_form($form) {
  $rows = array();

  foreach (element_children($form) as $key) {
    if (isset($form[$key]['product_id'])) {
      $product_id = $form[$key]['product_id'];
      $row = array();
      $row[] = array('data' => drupal_render($form[$key]['product_name']));
      $row[] = array('data' => drupal_render($form[$key]['distributor_name']));
      $row[] = array('data' => drupal_render($form[$key]['order_product_qty']));
      $row[] = array('data' => drupal_render($form[$key]['would_buy_more']));
      $row[] = array('data' => drupal_render($form[$key]['minimum_order']));
      $row[] = array('data' => drupal_render($form[$key]['ordered_' . $key]), 'class' => 'textfield');
      $rows[] = $row;
      $form[$key]['#printed'] = TRUE;
      $form[$key]['product_id']['#printed'] = TRUE; // avoid re-rendering these
    }
  }

  $header = array();
  $header[] = t('Product');
  $header[] = t('Distributor');
  $header[] = t('Ordered by Members');
  $header[] = t('Would Buy More');
  $header[] = t('Minimum Order');
  $header[] = array('data' => t('Qty to Order'));

  // show which ordering period we're using
  $start = (int)$form['start']['#value'];
  $end = (int)$form['end']['#value'];
  $date_format = "ga l\, M jS Y";
  $output = 'Orders placed from '. format_date($start, $type='custom', $format=$date_format) .' to '. format_date($end, $type='custom', $format=$date_format);

  $output .= theme('table', $header, $rows);
  $output .= drupal_render($form);
  return $output;
}

/*
 * validate finalization form
 */
function uc_buyingclub_finalization_form_validate($form, &$form_state) {
  foreach ($form_state['values'] as $key => $value) {
    if (stripos($key, 'ordered_') === 0) {
      if ($value < 0) {
        form_set_error('', t('Negative orders are not allowed'));
      }
      if (!is_numeric($value)) {
        form_set_error('', t('Orders must be numbers'));
      }
    }
  }
}

/*
 * submit finalization form
 */
function uc_buyingclub_finalization_form_submit($form_id, $form) {
  $form_values = $form['values'];
  $prefix = 'ordered_';
  $start = $form_values['start'];
  $end = $form_values['end'];

  $would_buy_more = _uc_buyingclub_get_would_buy_more_qty($start, $end);

  // finalize each product submitted with the quantity ordered as indicated
  foreach ($form_values as $key => $value) {
    if (stripos($key, $prefix) === 0) {
      $product_id = substr($key, strlen($prefix));
      $qty_ordered = $value;
      $qty_would_buy_more = $would_buy_more[$product_id];

      uc_buyingclub_finalize_product_order($product_id, $qty_would_buy_more, $qty_ordered, $start, $end);
    }
  }

  // finalize each the total order for each user who ordered in this period
  uc_buyingclub_finalize_users($start, $end);

  drupal_set_message(t('Ordered the given amounts for each product and notified purchasers'), $type='status', $repeat=FALSE);
}

/*
 * Finalize all orders for a given product by recording the quantity allocated.
 *
 * @param $product_id
 *    The nid of the product node
 * @param $qty_ordered
 *    The quantity ordered through the finalization form
 * @param $start
 *    The start of the ordering period (in seconds)
 * @param $end
 *    The end of the ordering period (in seconds)
 */
function uc_buyingclub_finalize_product_order($product_id, $qty_would_buy_more, $qty_ordered, $start, $end) {
  /*
   * first, give everyone who ordered this product their share
   */
  $query = "SELECT op.order_product_id AS id, op.qty AS qty_desired ".
    "FROM {uc_order_products} op, {uc_orders} o ".
    "WHERE op.order_id = o.order_id AND op.nid = %d ".
    "AND o.created > %d AND o.created < %d ".
    "ORDER BY o.created";

  $query_result = db_query($query, $product_id, $start, $end);

  $qty_available = $qty_ordered;
  $order_product_qty_given = array();
  if ($query_result) {
    while ($row = db_fetch_object($query_result)) {
      // determine how much of this order for this product will be fulfilled
      $qty_desired = $row->qty_desired;
      $qty_given = 0;

      if ($qty_available > 0) {
        if ($qty_desired <= $qty_available) {
          $qty_given = $qty_desired;
        }
        else { // give as much as we can
          $qty_given = $qty_available;
        }
      }

      // save
      $order_product_qty_given[$row->id] = $qty_given;
      $to_write = array(
        'order_product_id' => $row->id,
        'qty' => $qty_given,
        'finalized' => time(),
      );
      drupal_write_record('uc_buyingclub_order_products', $to_write);
      
      $qty_available -= $qty_given;
    }
  }

  /*
   * now, if there is anything left, give it first to the people who said they would take more
   */
  if ($qty_available > 0 && $qty_would_buy_more > 0) {
    // increment amount to give for each person who said they'd take more
    $query = "SELECT op.order_product_id AS order_product_id ".
      "FROM {uc_orders} o, {uc_order_products} op ".
      "WHERE op.order_id=o.order_id ".
        "AND o.created > %d AND o.created < %d ".
        "AND op.data LIKE '%%%s%%' ";

    $query_result = db_query($query, $start, $end, UC_BUYINGCLUB_WOULD_BUY_MORE_LABEL);
    if ($query_result) {
      while (($row = db_fetch_object($query_result)) && $qty_available > 0) {
        // find out how much the order-product got and increment
        $to_write = array(
          'order_product_id' => $row->order_product_id,
          'qty' => $order_product_qty_given[$row->order_product_id] + 1,
          'finalized' => time(),
        );
        drupal_write_record('uc_buyingclub_order_products', $to_write, array('order_product_id'));
        $qty_available--;
      }
    }
  }

  /*
   * finalize the product as a whole for this ordering period.
   * record overstock, if any.
   */
  $ordering_period = _uc_buyingclub_get_ordering_period($start, $end);
  $to_write = array(
    'product_id' => $product_id,
    'qty_ordered' => $qty_ordered,
    'qty_overstock' => $qty_available,
    'ordering_period_id' => $ordering_period->ordering_period_id,
    'finalized' => time(),
  );
  drupal_write_record('uc_buyingclub_products', $to_write);
}

/*
 * Finalize orders for all users in the given ordering period.
 *
 * @param $start
 *    The start of the ordering period (in seconds)
 * @param $end
 *    The end of the ordering period (in seconds)
 */
function uc_buyingclub_finalize_users($start, $end) {
  $query = "SELECT DISTINCT o.uid AS user_id ".
    "FROM {uc_orders} o ".
    "WHERE o.created > %d AND o.created < %d";

  $query_result = db_query($query, $start, $end);

  if ($query_result) {
    while ($row = db_fetch_object($query_result)) {
      uc_buyingclub_finalize_user($row->user_id, $start, $end);
    }
  }
}

/*
 * Finalize orders for a given user in the given ordering period.
 *
 * @param $user_id
 *    The id of the user
 * @param $start
 *    The start of the ordering period (in seconds)
 * @param $end
 *    The end of the ordering period (in seconds)
 */
function uc_buyingclub_finalize_user($user_id, $start, $end) {
  $query = "SELECT op.title AS title, op.qty AS qty_desired, bop.qty AS qty_given, op.price AS price, o.billing_first_name as first_name ".
    "FROM {uc_orders} o, {uc_order_products} op, {uc_buyingclub_order_products} bop ".
    "WHERE o.uid=%d AND o.created > %d AND o.created < %d ".
      "AND op.order_id = o.order_id AND bop.order_product_id = op.order_product_id";

  $query_result = db_query($query, $user_id, $start, $end);

  $total_cost = 0;
  $products_given = array();
  $products_desired = array();
  $products_cost = array();
  $first_name = '';

  if ($query_result) {
    while ($row = db_fetch_object($query_result)) {
      // get first name if we don't already have it
      if ($first_name == '') {
        $first_name = $row->first_name;
      }

      // assemble summary, new price
      $price = (float)$row->price;
      $qty_given = (int)$row->qty_given;
      $qty_desired = (int)$row->qty_desired;

      $cost = $price * $qty_given;
      $total_cost += $cost;

      if (!$products_given[$row->title]) $products_given[$row->title] = 0;
      $products_given[$row->title] += $qty_given;

      if (!$products_desired[$row->title]) $products_desired[$row->title] = 0;
      $products_desired[$row->title] += $qty_desired;

      if (!$products_cost[$row->title]) $products_cost[$row->title] = 0;
      $products_cost[$row->title] += $cost;
    }

    $params = array(
      'first_name' => $first_name,
      'total_cost' => $total_cost,
      'products_given' => $products_given,
      'products_desired' => $products_desired,
      'products_cost' => $products_cost,
    );

    $account = user_load($user_id);
    $store_values = uc_store_token_values('global');
    job_queue_add('drupal_mail', 'Finalization mail', array('uc_buyingclub', 'final_order', $account->mail, user_preferred_language($account), $params, $store_values['store-email']), '', TRUE);
  }
}

/*
 * view finalized orders (summary)
 */

function uc_buyingclub_view_finalized_orders() {
  // find start of most recent ordering period
  $period = _uc_buyingclub_get_most_recent_ordering_period();
  $start = $period->start;
  $end = $period->end;

  // query
  $distributor_db_info = content_database_info(content_fields('field_distributor')); 
  $distributor_table = $distributor_db_info['table'];
  $distributor_column = $distributor_db_info['columns']['nid']['column'];

  $minimum_order_db_info = content_database_info(content_fields('field_minimum_order')); 
  $minimum_order_table = $minimum_order_db_info['table'];
  $minimum_order_column = $minimum_order_db_info['columns']['value']['column'];

  $query = "SELECT p.title AS product_name, d.title AS distributor_name, SUM(op.qty) AS qty_desired, ctd2.". $minimum_order_column ." AS minimum_order, SUM(bop.qty) AS qty_ordered ".
    "FROM {uc_orders} o, {uc_order_products} op, {node} p, {node} d, {". $distributor_table ."} ctd, {". $minimum_order_table ."} ctd2, {uc_buyingclub_order_products} bop ".
    "WHERE p.nid=op.nid AND op.order_id=o.order_id AND bop.order_product_id = op.order_product_id ".
      "AND o.created > %d AND o.created < %d ".
      "AND ctd.vid=p.vid AND ctd.". $distributor_column ."=d.nid AND ctd2.vid=p.vid ".
    "GROUP BY p.nid ".
    "ORDER BY d.title, p.title ";

  $query_result = db_query($query, $start, $end);

  // build output
  $date_format = "ga l\, M jS Y";
  $out = 'Orders placed from '. 
    format_date($start, $type='custom', $format=$date_format) .' to '. 
    format_date($end, $type='custom', $format=$date_format) .'<br /><br />';

  // default output
  if (!$query_result || $query_result->num_rows === 0) {
    return $out . "No finalized orders to see for this period.";
  }

  // make table
  $data = array();

  if ($query_result) {
    while ($row = db_fetch_array($query_result)) {
      $data[] = $row;
    }
  }

  return $out . theme_table(array('Product', 'Distributor', 'Quantity Desired', 'Minimum Order', 'Quantity Ordered',), $data);
}

function uc_buyingclub_download_finalized($ordering_period_id=3, $distributor_id=2) {
  // select all products with the total ordered
  $distributor_db_info = content_database_info(content_fields('field_distributor')); 
  $distributor_table = $distributor_db_info['table'];
  $distributor_column = $distributor_db_info['columns']['nid']['column'];

  $minimum_order_db_info = content_database_info(content_fields('field_minimum_order')); 
  $minimum_order_table = $minimum_order_db_info['table'];
  $minimum_order_column = $minimum_order_db_info['columns']['value']['column'];
  
  $query = "SELECT p.title AS 'product', ubp.qty_ordered AS `total ordered`, ctd2.". $minimum_order_column ." AS `minimum order` ".
    "FROM {uc_buyingclub_products} ubp, {uc_products} up, {node} p, {node} d, {". $distributor_table ."} ctd, {". $minimum_order_table ."} ctd2 ".
    "WHERE ubp.product_id = p.nid ".
    "AND ctd.vid = p.vid ".
    "AND ctd.". $distributor_column ." = %d ".
    "AND ctd2.vid = p.vid ".
    "AND ubp.ordering_period_id = %d ".
    "GROUP BY p.nid ".
    "ORDER BY d.title, p.title";

  $result = db_query($query, $distributor_id, $ordering_period_id);

  drupal_set_header('Content-Type: text/csv');
  drupal_set_header('Content-Disposition: attachment; filename=test.csv');

  // output as CSV
  $header = array(
    'Product',
    'Quantity to order',
    'Minimum order',
  );
  print implode(',', $header) ."\r\n";
   
  while ($row = db_fetch_array($result)) {
    foreach ($row as $value) {
      $values[] = '"' . str_replace('"', '""', decode_entities(strip_tags($value))) . '"'; 
    }
    print implode(',', $values) ."\r\n";
    unset($values);
  }
}

/*
 * view ordering periods
 */

function uc_buyingclub_view_ordering_periods() {
  // query
  $query = "SELECT p.start, p.end ".
    "FROM {uc_buyingclub_ordering_periods} p ".
    "WHERE 1 ".
    "ORDER BY p.start DESC ";

  $query_result = db_query($query);

  // make table
  $data = array();
  $date_format = "l\, M jS Y \a\\t ga";

  if ($query_result) {
    while ($row = db_fetch_array($query_result)) {
      $data[] = array(
        'start' => format_date((int)$row['start'], $type='custom', $format=$date_format),
        'end' => format_date((int)$row['end'], $type='custom', $format=$date_format),
      );
    }
  }

  // theme table
  return theme_table(array('Start', 'End'), $data);
}

/*
 * Show a summary by-user of the most recent ordering period. Meant to be something that could be printed and taken to a pickup day.
 */
function uc_buyingclub_view_finalized_orders_by_user() {
  drupal_add_css(drupal_get_path('module', 'uc_buyingclub') .'/uc_buyingclub.css');

  // find start of most recent ordering period
  $period = _uc_buyingclub_get_most_recent_ordering_period();
  $start = $period->start;
  $end = $period->end;

  // query
  $distributor_db_info = content_database_info(content_fields('field_distributor')); 
  $distributor_table = $distributor_db_info['table'];
  $distributor_column = $distributor_db_info['columns']['nid']['column'];

  $query = "SELECT o.billing_first_name AS member_first_name, o.billing_last_name AS member_last_name, p.title AS product_name, d.title AS distributor_name, SUM(op.qty) AS qty_desired, SUM(bop.qty) AS qty_ordered, op.price AS price ".
    "FROM {uc_orders} o, {uc_order_products} op, {node} p, {node} d, {". $distributor_table ."} ctd, {uc_buyingclub_order_products} bop ".
    "WHERE p.nid=op.nid AND op.order_id=o.order_id AND bop.order_product_id = op.order_product_id ".
      "AND o.created > %d AND o.created < %d ".
      "AND ctd.vid=p.vid AND ctd.". $distributor_column ."=d.nid ".
    "GROUP BY o.billing_last_name, o.billing_first_name, p.nid ".
    "ORDER BY o.billing_last_name, o.billing_first_name, d.title, p.title ";

  $query_result = db_query($query, $start, $end);

  // build output
  $date_format = "ga l\, M jS Y";
  $out = 'Orders placed from '. 
    format_date($start, $type='custom', $format=$date_format) .' to '. 
    format_date($end, $type='custom', $format=$date_format) .'<br /><br />';

  // default output
  if (!$query_result || $query_result->num_rows === 0) {
    return $out . "No finalized orders to see for this period.";
  }

  // start first table
  $current_member_name = '';
  $total_price = 0;
  $table = array();
  $table_headers = array('Product', 'Distributor', 'Quantity Desired', 'Quantity to Receive', 'Price',);

  while ($row = db_fetch_array($query_result)) {
    $member_name = $row['member_first_name'] .' '. $row['member_last_name'];
    if ($member_name !== $current_member_name) {
      // output old table
      if (count($table) > 0) {
        $table[] = array('', '', '', 'Total Due', money_format('$%.2i', $total_price));
        $out .= theme_table($table_headers, $table);
      }

      // start a new table
      $out .= '<div class="uc_buyingclub_member_name">'. $member_name .'</div>';
      $current_member_name = $member_name;
      $table = array();
      $total_price = 0;
    }

    // add this row to the table
    unset($row['member_first_name']);
    unset($row['member_last_name']);
    $price = (float)$row['price'] * (float)$row['qty_ordered'];
    $total_price += $price;
    $row['price'] = money_format('$%.2i', $price);
    $table[] = $row;
  }

  // output last table
  if (count($table) > 0) {
    $table[] = array('', '', '', 'Total Due', money_format('$%.2i', $total_price));
    $out .= theme_table($table_headers, $table);
  }

  return $out;
}

function uc_buyingclub_view_finalized_orders_by_distributor() {
  drupal_add_css(drupal_get_path('module', 'uc_buyingclub') .'/uc_buyingclub.css');

  // find start of most recent ordering period
  $period = _uc_buyingclub_get_most_recent_ordering_period();
  $start = $period->start;
  $end = $period->end;

  // query
  $distributor_db_info = content_database_info(content_fields('field_distributor')); 
  $distributor_table = $distributor_db_info['table'];
  $distributor_column = $distributor_db_info['columns']['nid']['column'];

  $query = "SELECT d.title AS distributor_name, p.title AS product_name, o.billing_first_name AS member_first_name, o.billing_last_name AS member_last_name, SUM(bop.qty) AS qty_ordered ".
    "FROM {uc_orders} o, {uc_order_products} op, {node} p, {node} d, {". $distributor_table ."} ctd, {uc_buyingclub_order_products} bop ".
    "WHERE p.nid=op.nid AND op.order_id=o.order_id AND bop.order_product_id = op.order_product_id ".
      "AND o.created > %d AND o.created < %d ".
      "AND ctd.vid=p.vid AND ctd.". $distributor_column ."=d.nid ".
      "AND bop.qty > 0 ".
    "GROUP BY d.title, p.nid, o.billing_last_name, o.billing_first_name ".
    "ORDER BY d.title, p.title, o.billing_last_name, o.billing_first_name ";

  $query_result = db_query($query, $start, $end);

  // build output
  $date_format = "ga l\, M jS Y";
  $out = 'Orders placed from '. 
    format_date($start, $type='custom', $format=$date_format) .' to '. 
    format_date($end, $type='custom', $format=$date_format) .'<br /><br />';

  // default output
  if (!$query_result || $query_result->num_rows === 0) {
    return $out . "No finalized orders to see for this period.";
  }

  $current_distributor_name = '';
  $current_product_name = '';
  $total_qty = 0;
  $table = array();
  $table_headers = array('Member', 'Quantity to Receive', );

  while ($row = db_fetch_array($query_result)) {
    if ($row['product_name'] !== $current_product_name) {
      // output old table
      if (count($table) > 0) {
        $table[] = array('Total quantity', $total_qty);
        $out .= theme_table($table_headers, $table);
      }

      // might also have a new distributor
      if ($row['distributor_name'] !== $current_distributor_name) {
        $out .= '<div class="uc_buyingclub_distributor_name">'. $row['distributor_name'] .'</div>';
        $current_distributor_name = $row['distributor_name'];
      }

      $out .= '<div class="uc_buyingclub_product_name">'. $row['product_name'] .'</div>';
      $current_product_name = $row['product_name'];
      $table = array();
      $total_qty = 0;
    }

    $total_qty += (int)$row['qty_ordered'];
    $table[] = array($row['member_first_name'] .' '. $row['member_last_name'], $row['qty_ordered']);
  }

  // output old table
  if (count($table) > 0) {
    $table[] = array('Total quantity', $total_qty);
    $out .= theme_table($table_headers, $table);
  }

  return $out;
}

/*
 * other useful functions
 */

/*
 * Get ordering period by specified start and end times.
 */
function _uc_buyingclub_get_ordering_period($start, $end) {
  $query = "SELECT p.ordering_period_id, p.start, p.end ".
    "FROM {uc_buyingclub_ordering_periods} p ".
    "WHERE p.start = %d AND p.end = %d ".
    "LIMIT 1";

  $query_result = db_query($query, $start, $end);

  if ($query_result) {
    $period = db_fetch_object($query_result);
  }

  return $period;
}

/*
 * Get most recent/current ordering period based on the current time.
 */
function _uc_buyingclub_get_most_recent_ordering_period() {
  $query = "SELECT p.start, p.end ".
    "FROM {uc_buyingclub_ordering_periods} p ".
    "WHERE p.start < %d ".
    "ORDER BY p.start DESC ".
    "LIMIT 1";

  $query_result = db_query($query, time());

  if ($query_result) {
    $period = db_fetch_object($query_result);
  }

  return $period;
}

/*
 * Get next (not current) ordering period based on the current time.
 */
function _uc_buyingclub_get_next_ordering_period() {
  $query = "SELECT p.start, p.end ".
    "FROM {uc_buyingclub_ordering_periods} p ".
    "WHERE p.start > %d ".
    "ORDER BY p.start ASC ".
    "LIMIT 1";

  $query_result = db_query($query, time());

  if ($query_result) {
    $period = db_fetch_object($query_result);
  }

  return $period;
}
